#use Cartesian coordinate system 
#data strutures: it has list values that contain other lists and similar complex variables. 
#as games get more complicated, you'll need to organize  your data into data structures. 
#TOPICS: data structures, pythagorean theorem, remove() list method, isdigit() string method, sys.exit() methd
#3 chests to collect, player has 20 sonar devices to use to find them. 
#Sonar devices produce a 'ring' and can only find the distance from the chest, not the chest's direction.
#Chests can be anywhere on the ring around the sonar device. 
#Multiple sonar devices working together can narrow down the chest's location to the exact coordinates where the rings intersect.
#basically we use Cartesian coordinates to choose where we drop the sonar devices. 
#finish explaining each step

#(1): Import Modules:
#sys contains exit() function; math module has sqrt function
import random
import sys
import math

#(2): Creating a new Game Board:
#each time we start a new game, need to create a new board data structure, which is created by getNewBoard()
#the board is created in ASCII art with x- and y-coordinates around it. 
#board is accessed in the same way we access Cartesian coordinates; so to get coordinate (26,12) we use board[26][12]
#board is a lis of lists of strings: the first list represents the x-coord, and will contain 60 lists across. We create a for loop that will apend 60 blank lists to it
#each of the 60 lists represent an x-coord; there are also 15 rows so each of the 60 lists must contain 15 strings.
#we add another for loop to add 15 single-character strings
#the oceans is a bunch of randomly choose '~' and '`' strings. Use random.randint() to randomly choose them
#if random.randit() is 0 then we use `~`, otherwise (i.e. it is 1) we use '`'
#then use return to return the vale in the board variable once we have done all of this
def getNewBoards():
  #Create a new 60x15 board data structure
  board = []
  for x in range(60):         #the main list is a list of 60 lists
    board.append([])
    for y in range(15):       #each list in the main list has 15 single-character strings. Use diff characters to make ocean look more readable.
      if random.randomint(0,1) == 0:
        board[x].append('~')
      else:
        board[x].append('`')
  return board

#(3) Drawing the Game Board
#we will define the drawBoard() method that we can call whenever we need to draw a new board as the game progresses
#basically it will have 4 steps:
#i: create a string variable of the line with 1,2,3,4,5 spaced out with wide gapes. These numbers mark the coordinates for 10,20,30,40,50 on the x-axis
#ii: use that string to display x-coordinates along the top of the screen
#iii: print each row of the ocean along with the y-coordinates on both sides of the screen
#iv: print the x-axis again at the bottom. Having coordinates on all sides makes it easier to see where to place a sonar device.
def drawBoard(board):
  #Draw the board data structure
  tensDigitLine = '    ' #initial space for the numbers down the left side of the board
  for i in range(1, 6):
    tensDigitLine += (' ' * 9) + str(i)
    
  #Print numbers across the top of the board
  print(tensDigitsLine)
  print('    ' + ('0123456789' * 6))
  print()
  
  #Print each of the 15 rows
  for row in range(15):
    #single digit numbers nee to be padded with an extra space
    if row < 10:
      extraSpace = ' '
    else:
      extraSpace = ''
      
    #Create the string for this row on the board
    boardRow = ''
    for column in range(60):
      boardRow += board[column][row]
    
    print('%s%s %s %s' % (extraSpace, row, boardRow, row))
    
  #print the numbers across the bottom of the board
  print()
  print('    ' + ('123456789' * 6))
  print(tensDigitsLine)
  
def get RandomChests(numChests):
  #create a list of chest data structures (two-item lists of x, y int coordinates)
  chests = []
  while len(chests) < numChests:
    newChest = [random.randint(0, 59), random.randint(0, 14)]
    if newChest not in chests:         #makes sure a chest is not already here
      chests.append(newChest)
  return chests
  
def isOnBoard(x, y):
  #return True if the coordinates are on the board; otherwise, return False.
  return x >= 0 and x<= 59 and y >= 0 and y <= 14
  
def makeMove(board, chests, x, y):
  #change the board data structure with a sonar device character.
  #remove treasure chests from the chest list if they are found.
  #return False if this is an invalid move.
  #otherwise, return the string of the result of this move.
  for cx, cy in chests:
    distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy -y)
    
    if distance < smallestDistance:      #we want the closest treasure chest
      smallestDistance = distance
      
  smallestDistance = round(smallestDistance)
  
  if smallestDistance == 0:
    # xy is directly on a treasure chest
    chests.remove([x, y])
    return 'You have found a sunken treasure chest!'
  else:
    if smallDistance < 10:
      board[x][y] = str(smallestDistance)
      return 'Treasure detected at a distance of %s from the sonar device.' % (smallestDistance)
      
    else:
      board[x][y] = 'X'
      return 'Sonar did not detect anything. All treasure chests out of range.'
      
def enterPlayerMove(previousMoves):
  #let the player enter their moves. Returns a two-item list of int xy coordinates
  print('Where do you want to drop the next sonar device? (0-59 0-14) (or type quit)')
  while True:
    move = input()
    if move.lower()== 'quit':
      print('Okay, thanks for playing!')
      sys.exit()
      
    move = move.split()
    if len(move) == 2 and move[0].isdigit() and move[1].isdigit() and 
      isOnBoard(int(move[0]), int(move[1])):
        if [int(move[0], int(move[1]) in previousMoves:
          print('You already moved there.')
          continue
        return [int(move[0], int(move[1])]
        
    print('Enter a number from 0 to 59, a space, then a number from 0 to 14.')
    
def showInstructions():
  print('''Instructions:
  You are the Captain of the Trapstar, a treasure-hunting ship. Your current mission is to use sonar devices to find three
  treasure chests at the bottom of the ocean. But you only have cheap sonar that finds distance, not direction.
  
  Enter the coordinates to drop a sonar device. The ocean map will be marked with how far away the nearest chest is, 
  or an X if it is beyond the sonar device's range. For example, the C marks where the chests are. The sonar device shows a 3
  because the closest chest is 3 spaces away.
  
  MAYBE DRAW OUT THE OCEAN etc.
  
  Press enter to continue...''')
    input()
    
    print('''When you drop a sonar device directly on a chest, you retrieve it and the other sonar devices update to show how
    far away the next nearest chest is. The chests are beyond the range of the sonar deice on the left, so it shows an X.
    
    The treasure chests don't move around. Sonar devices can detect treasure chests up to a distance of 9 spaces. Try to collect
    all 3 chests before running out of sonar devices. Good luck!
    
    Press enter to continue...''')
      input()

print('S O N A R !')
print()
print('Would you like to view instructions? (yes/no)')
if input().lower().startswith('y'):
  showInstructions()
  
while True:
  #Game setup
  sonarDevices = 20
  theBoard = getNewBoard()
  theChests = getRandomChests(3)
  drawBoard(theBoard)
  previousMoves = []
  
  while sonarDevices > 0: 
    #Show sonar device and chest statuses.
    print('You have %s sonar device(s) left. %s treasure chest(s) remain in play.' % (sonarDevices, len(theChests)))
    
    x, y = enterPlayerMove(previousMoves)
    previousMoves.append([x, y]) #This tracks all moves so that the sonar devices can be updated.
    
    moveResult = makeMove(theBoard, theChests, x, y)
    if moveResult == False:
      continue
    else:
      if moveResult == 'You have found a sunken treasure chest!':
        #Update all the sonar devices on the map.
        for x, y in previousMoves:
          makeMove(theBoard, theChests, x, y)
        drawBoard(theBoard)
        print(moveResult)
        
      if len(theChests) == 0:
        print('Congrats, you've found all of the sunken treasures!')
        break
        
      sonarDevices -=1
      
   if sonarDevices == 0:
    print('We\'ve run out of sonar devices! Now we have to return without all of the treasure. Game over.')
    print('   The remaining chests were here:')
    for x, y in theChests:
      print('   %s, %s' % (x, y))
    
    print('Do you want to play again? (yes/no)')
    if not input().lower().startswith('y'):
      sys.exit()
