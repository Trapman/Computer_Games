#use Cartesian coordinate system 
#data strutures: it has list values that contain other lists and similar complex variables. 
#as games get more complicated, you'll need to organize  your data into data structures. 
#TOPICS: data structures, pythagorean theorem, remove() list method, isdigit() string method, sys.exit() methd
#3 chests to collect, player has 20 sonar devices to use to find them. 
#Sonar devices produce a 'ring' and can only find the distance from the chest, not the chest's direction.
#Chests can be anywhere on the ring around the sonar device. 
#Multiple sonar devices working together can narrow down the chest's location to the exact coordinates where the rings intersect.
#basically we use Cartesian coordinates to choose where we drop the sonar devices. 

import random
import sys
import math

def getNewBoards():
  #Create a new 60x15 board data structure
  board = []
  for x in range(60):         #the main list is a list of 60 lists
    board.append([])
    for y in range(15):       #each list in the main list has 15 single-character strings. Use diff characters to make ocean look more readable.
      if random.randomint(0,1) == 0:
        board[x].append('~')
      else:
        board[x].append('`')
  return board
  
def drawBoard(board):
  #Draw the board data structure
  tensDigitLine = '    ' #initial space for the numbers down the left side of the board
  for i in range(1, 6):
    tensDigitLine += (' ' * 9) + str(i)
    
  #Print numbers across the top of the board
  print(tensDigitsLine)
  print('    ' + ('0123456789' * 6))
  print()
  
  #Print each of the 15 rows
  for row in range(15):
    #single digit numbers nee to be padded with an extra space
    if row < 10:
      extraSpace = ' '
    else:
      extraSpace = ''
      
    #Create the string for this row on the board
    boardRow = ''
    for column in range(60):
      boardRow += board[column][row]
    
    print('%s%s %s %s' % (extraSpace, row, boardRow, row))
    
  #print the numbers across the bottom of the board
  print()
  print('    ' + ('123456789' * 6))
  print(tensDigitsLine)
  
def get RandomChests(numChests):
  #create a list of chest data structures (two-item lists of x, y int coordinates)
  chests = []
  while len(chests) < numChests:
    newChest = [random.randint(0, 59), random.randint(0, 14)]
    if newChest not in chests:         #makes sure a chest is not already here
      chests.append(newChest)
  return chests
  
def isOnBoard(x, y):
  #return True if the coordinates are on the board; otherwise, return False.
  return x >= 0 and x<= 59 and y >= 0 and y <= 14
  
def makeMove(board, chests, x, y):
  #change the board data structure with a sonar device character.
  #remove treasure chests from the chest list if they are found.
  #return False if this is an invalid move.
  #otherwise, return the string of the result of this move.
  for cx, cy in chests:
    distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy -y)
    
    if distance < smallestDistance:      #we want the closest treasure chest
      smallestDistance = distance
      
  smallestDistance = round(smallestDistance)
  
  if smallestDistance == 0:
    # xy is directly on a treasure chest
    chests.remove([x, y])
    return 'You have found a sunken treasure chest!'
  else:
    if smallDistance < 10:
      board[x][y] = str(smallestDistance)
      return 'Treasure detected at a distance of %s from the sonar device.' % (smallestDistance)
      
    else:
      board[x][y] = 'X'
      return 'Sonar did not detect anything. All treasure chests out of range.'
      

