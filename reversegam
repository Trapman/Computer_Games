'''Two-player board game played on an 8x8 grid, using tiles that are black and white (we will use X and O instead for sake
of brevity, so we will use Cartesian Coordinates and a computer AI.

#finish writing out description 
#add in AI, make more advanced 

Two players take turns placing tiles of their chosen color on the board. When a player faces a tile on the board, any of the
opponent's tiles that are between the new tile and the other tiles of the player's color are flipped. E.g., if white player
has a tile at (5,4) and places a new tiles on space (5,6), if there is a black tile at (5,5) then it becomes a white tile.
Tiles in all directions are flipped as long as they are between the player's new tile and an existing tile of that color.'''

import random
import sys
WIDTH = 8 
HEIGHT = 8
def drawBoard(board):
  #Print the board passed to this function. Return None.
  print(' 12345678')
  print(' +--------+')
  for y in range(HEIGHT): 
    print('%s|' % (y+1), end='')
    for x in range(WIDTH):
      print(board[x][y], end='')
    print('|%s' % (y+1))
  print(' +--------+')
  print(' . 12345678')
  
def getNewBoard():
  #Create a brand new, blank board data structure
  board = []
  for i in range(WIDTH):
    board.append([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ')]
  return board
  
def isValidMove(board, tile, xstart, ystart):
  #return False if the player's move on space xstart, ystart is invalid.
  #if it's a valid move, return a list of spaces that would become the player's move if they made a move here.
  if board[xstart][ystart] != ' ' or not isOnBoard(xstart, ystart): return False
  
  if tile =='X':
    otherTile = 'O'
  else:
    otherTile = 'X'
    
    tilesToFlip = []
    for xdirection, ydirection in [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]]:
      x, y = xstart, ystart
      x += xdirection #first step in the x direction
      y += ydirection #first step in the y direction
      while isOnBoard(x, y) and board[x][y] == otherTile:
        #Keep moving in this x & y direction.
        x += xdirection
        y += ydirection
        if isOnBoard(x, y) and board[x][y] == tile:
          #There are pieces to flip over. Go in a reverse direction until we each the original space, noting all tiles along the way
          while True:
            x -= xdirection
            y -= ydirection
            if x == xstart and y ==ystart:
              break
            tilesToFlip.append([x, y])
            
      if len(tilesToFlip) == 0:           #if no tiles were flipped, then this isn't a vaid move
        return False
      return tilesToFlip
      
def isOnBoard(x, y):
  #Return True if the coordinates are located on the board.
  return x >= 0 and x <= WIDTH - 1 and y >= 0 and y <= HEIGHT - 1
  
def getBoardWithValidMoves(board, tile):
  #Return a new board with periods marking the valid moves the player can make.
  boardCopy = getBoardCopy(board)
  
  for x, y in getValidMoves(boardCopy, tile):
    boardCopy[x][y] = '.'
  return boardCopy 
  
def getValidMoves(board, tile):
  #return a list of [x,y] lists of valid moves for the given player on the given board.
  validMoves = []
  for x in range(WIDTH):
    for y in range(HEIGHT):
      if isValidMove(board, tile, x, y) != False:
        validMoves.append([x, y])
    return validMoves
def getScoreOfBoard(board):
  #determine the score by counting the tiles. Return a dictionary with keys 'X' and 'O'.
  xscore = 0
  oscore = 0 
  for x in range(WIDTH):
    for y in range(HEIGHT):
      if board[x][y] == 'X':
        xscore += 1
      if board[x][y] == 'O':
        oscore += 1
   return {'X':xscore, 'O':score}
 
 def enterPlayerTile():
  #let the player enter which tile they want to be
  #return a list with the players tile as the first item and the computer's tile as the second
  tile = ''
  while not (tile == 'X' or tile == 'O'):
    print('Do you want to be X or O?')
    tile = input().upper()
    
  #the first element in the list is the player's tile, and the second is the computer's
  if tile == 'X':
    return ['X', 'O']
  else:
    return ['O', 'X']
    
def whoGoesFirst():
  #randomly chooses who starts the game
  if random.randit(0, 1) == 0:
    return 'computer'
  else:
    return 'player'
    
def makeMove(board, tile, xstart, ystart):
  #place the tile on the board at xstart. ystart and flip any of the opponent's pieces
  #return False if this is an invalid move; True it it's valid
  tilesToFlip = isValidMove(board, tile, xstart, ystart)
  
  if tilesToFlip == False:
    return False
    
  board[xstart][ystart] = tile
  for x, y in tilesToFlip:
    board[x][y] = tile
  return True
  
def getBoardCopy(board):
  #make a duplicate of the board list and return it
  boardCopy = getNewBoard()
  for x in range(WIDTH):
    for y in range(HEIGHT):
      boardCopy[x][y] = board[x][y]
