'''Two-player board game played on an 8x8 grid, using tiles that are black and white (we will use X and O instead for sake
of brevity, so we will use Cartesian Coordinates and a computer AI.


Two players take turns placing tiles of their chosen color on the board. When a player faces a tile on the board, any of the
opponent's tiles that are between the new tile and the other tiles of the player's color are flipped. E.g., if white player
has a tile at (5,4) and places a new tiles on space (5,6), if there is a black tile at (5,5) then it becomes a white tile.
Tiles in all directions are flipped as long as they are between the player's new tile and an existing tile of that color.'''

import random
import sys
WIDTH = 8 
HEIGHT = 8

#(2) Drawing the Board Structure on the Screen:
#basically drawBoard() takes a board data structure and displays in on screen so the player knows where the tiles are placed.
#and then we can print the current game board based on the BOARD variable
def drawBoard(board):
  #Print the board passed to this function. Return None.
  print(' 12345678')
  print(' +--------+')
  for y in range(HEIGHT): 
    print('%s|' % (y+1), end='')
    for x in range(WIDTH):
      print(board[x][y], end='')
    print('|%s' % (y+1))
  print(' +--------+')
  print(' . 12345678')
  
#(3) Create Fresh Board Data Structure
#this will return return a blank board with no moves. Just appends a bunch of '' strings for blank spaces.
def getNewBoard():
  #Create a brand new, blank board data structure
  board = []
  for i in range(WIDTH):
    board.append([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ')]
  return board
 
#(4) Check Whether a Move is Valid
#For a move to be valid it must be on the board and also flip at least one of the opponent's tiles.
#So it basically checks whether the x- and y-coordinates are on the game board and whether the space is empty using isOnBoard()
#Also makes sure that the coords are between 0 and WIDTH or HEIGHT of the board minus 1.
#if/else statements let the function know the opponent's tile
def isValidMove(board, tile, xstart, ystart):
  #return False if the player's move on space xstart, ystart is invalid.
  #if it's a valid move, return a list of spaces that would become the player's move if they made a move here.
  if board[xstart][ystart] != ' ' or not isOnBoard(xstart, ystart): return False
  
  if tile =='X':
    otherTile = 'O'
  else:
    otherTile = 'X'

#(5) Check each of the 8 directions:
#this for loop will iterate through a list of lists that represent the directions on the board that need to be checked. 
    tilesToFlip = []
    for xdirection, ydirection in [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]]:
      x, y = xstart, ystart
      x += xdirection #first step in the x direction
      y += ydirection #first step in the y direction
      while isOnBoard(x, y) and board[x][y] == otherTile:
        #Keep moving in this x & y direction.
        x += xdirection
        y += ydirection
        if isOnBoard(x, y) and board[x][y] == tile:
          #There are pieces to flip over. Go in a reverse direction until we each the original space, noting all tiles along the way
          while True:
            x -= xdirection
            y -= ydirection
            if x == xstart and y ==ystart:
              break
            tilesToFlip.append([x, y])
            
            
      if len(tilesToFlip) == 0:           #if no tiles were flipped, then this isn't a vaid move
        return False
      return tilesToFlip
      
def isOnBoard(x, y):
  #Return True if the coordinates are located on the board.
  return x >= 0 and x <= WIDTH - 1 and y >= 0 and y <= HEIGHT - 1
  
def getBoardWithValidMoves(board, tile):
  #Return a new board with periods marking the valid moves the player can make.
  boardCopy = getBoardCopy(board)
  
  for x, y in getValidMoves(boardCopy, tile):
    boardCopy[x][y] = '.'
  return boardCopy 
  
def getValidMoves(board, tile):
  #return a list of [x,y] lists of valid moves for the given player on the given board.
  validMoves = []
  for x in range(WIDTH):
    for y in range(HEIGHT):
      if isValidMove(board, tile, x, y) != False:
        validMoves.append([x, y])
    return validMoves
def getScoreOfBoard(board):
  #determine the score by counting the tiles. Return a dictionary with keys 'X' and 'O'.
  xscore = 0
  oscore = 0 
  for x in range(WIDTH):
    for y in range(HEIGHT):
      if board[x][y] == 'X':
        xscore += 1
      if board[x][y] == 'O':
        oscore += 1
   return {'X':xscore, 'O':score}
 
 def enterPlayerTile():
  #let the player enter which tile they want to be
  #return a list with the players tile as the first item and the computer's tile as the second
  tile = ''
  while not (tile == 'X' or tile == 'O'):
    print('Do you want to be X or O?')
    tile = input().upper()
    
  #the first element in the list is the player's tile, and the second is the computer's
  if tile == 'X':
    return ['X', 'O']
  else:
    return ['O', 'X']
    
def whoGoesFirst():
  #randomly chooses who starts the game
  if random.randit(0, 1) == 0:
    return 'computer'
  else:
    return 'player'
    
def makeMove(board, tile, xstart, ystart):
  #place the tile on the board at xstart. ystart and flip any of the opponent's pieces
  #return False if this is an invalid move; True it it's valid
  tilesToFlip = isValidMove(board, tile, xstart, ystart)
  
  if tilesToFlip == False:
    return False
    
  board[xstart][ystart] = tile
  for x, y in tilesToFlip:
    board[x][y] = tile
  return True
  
def getBoardCopy(board):
  #make a duplicate of the board list and return it
  boardCopy = getNewBoard()
  for x in range(WIDTH):
    for y in range(HEIGHT):
      boardCopy[x][y] = board[x][y]

  return boardCopy
  
def isOnCorner(x, y):
  #return True if the position is in one of the four corners
  return (x == 0 or x == WIDTH -1) and (y == 0 or y == HEIGHT -1)
  
def getPlayerMove(board, playerTile):
  #let the player enter their move
  #return the move as [x, y] (or return the strings 'hints' or 'quit')
  DIGITS1T08 = '1 2 3 4 5 6 7 8'.split()
  while True:
    print('Enter your move, "quit" to end the game, or "hints" to toggle hints.')
    move = input().lower()
    if move == 'quit' or move == 'hints':
      return move
      
    if len(move) == 2 and move[0] in DIGITS1TO8 and move[1] in DIGITS1TO8:
      x = int(move[0]) - 1
      y = int(move[1]) - 1
      if isValidMove(board, playerTile, x, y) == False: 
        continue
      else:
        break
    else:
      print('That is not a valid move. Enter the column (1-8) and then the row (1-8).')
      print('For example, 81 will move on the top-right corner.')
      
  return [x, y]
  
def getComputerMove(board, computerTile):'
  #given a board and the computer's tile, determine where to move and return that move as an [x, y] list
  possibleMoves = getValidMoves(board, computerTile)
  random.shuffle(possibleMoves)                         #randomize the order of the moves
  
  #always go for a corner if available
  for x, y in possibleMoves:
    if isOnCorner(x, y):
      return[x, y]
      
  #find the highest scoring move possible
  bestScore = -1
  for x, y in possibleMoves:
    boardCopy = getBoardCopy(board)
    makeMove(boardCopy, computerTile, x, y)
    score = getScoreOfBoard(boardCopy)[computerTile]
    if score > bestScore:
      bestMove = [x, y]
      bestScore = score
  return bestMove
  
def printScore(board, playerTile, computerTile):
  scores = getScoreOfBoard(board)
  print('You: %s points. Computer: %s points.' % (scores[playerTile], scores[computerTile]))
  
def playGame(playerTile, computerTile):
  showHints = False
  turn = whoGoesFirst()
  print('The ' + turn + ' will go first.')
  
  #clear the board and place new starting pieces
  board = getNewBoard()
  board[3][3] = 'X'
  board[3][4] = 'O'
  board[4][3] = 'O'
  board[4][4[ = 'X'
  
  while True:
    playerValidMoves = getValidMoves(board, playerTile)
    computerValidMoves = getValidMoves(board, computerTile)
    
    if playerValidMoves == [] and computerValidMoves == []:
      return board      #no one can move so end game
     
   elif turn == 'player':     #player's turn
    if playerValidMoves !=[]:
      if showHints:
        validMovesBoard = getBoardWithValidMoves(board, playerTile)
          drawBoard(validMovesBoard)
      else:
        drawBoard(board)
      printScore(board, playerTile, computerTile)
      
      move = getPlayerMove(board, playerTile)
      if move == 'quit':
        print('Thanks for playing!')
        sys.exit()        #terminates the game
      elif move == 'hints':
        showHints == notShowHints
        continue
      else:
        makeMove(board, playerTile, move[0], move[1])
    turn = 'computer'
    
  elif turn == 'computer'       #computer's turn
    if computerValidMoves !=[]:
      drawBoard(board)
      printScore(board, playerTile, computerTile)
      
      input('Press ENTER to see the computer\'s move.')
        move = getComputerMove(board, computerTile)
        makeMove(board, computerTile, move[0], move[1])
          turn = 'player'
          
print('Welcome to Reversegam!')

playerTile, computerTile = enterPlayerTile()

while True:
  finalBoard = playGame(playerTile, computerTile)
  
  #display the final score.
  drawBoard(finalBoard)
  scores = getScoreOfBoard(finalBoard)
  print('X scored %s points. O scored %s points.' %(scores['X'], scores['O']))
  if scores[playerTile] > scores[computerTile]:
    print('You beat the computer by %s points, congrats!' % (scores[playerTile] - scores[computerTile]))
    elif scores[playerTile] < scores[computerTile]:
      print('You lost. The computer beat you by %s points.' % scores[computerTile] - scores[playerTile]))
    else:
      print('The game was a tie!')
      
    print(Do you want to play the game again? (yes or no)')
    if not input().lower().startswith('y'):
      break 
      
