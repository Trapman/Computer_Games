'''Converts normal English into a secret code. It can also convert secret codes back into regular English. 
   Only someone that knows the key to the secret codes will be able to understand the messages.
   
   The Caeser Ciper works by replacing each letter in it with a SHIFTED letter. E.g. if you shift A by 1, you get B, if you shift
   B by 3, you get E, and so forth. 
   
   So if we set the key = 3, then each letter will be shifted by 3. 
'''
#(1) Setting the maximum key length:
#the key used in the cipher should be between 1-52; MAX_KEY_SIZE() stores the size key
SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
MAX_KEY_SIZE = len(SYMBOLS)

#(2) Deciding to Encrypt or Decrypt:
#asks user for input(), then returns the mode that they enter (forces them to choose between encrypt and decrypt)
def getMode():
	while True:
		print('Do you wish to encrypt or decrypt a message?')
		mode = input().lower()
		if mode in ['encrypt', 'e', 'decrypt', 'd']:
			return mode
		else:
			print('Enter either "encrypt" or "e" or "decrypt" or "d".')

#(3) Getting Message from the Player:
#pretty straight forward, just asks player to input a message. Use RETURN INPUT() so we only use only 1 line instead of 2
def getMessage():
	print('Enter your message:')
	return input()
	
#(4)Getting the Key from the Player:
#the getKey() function lets player enter the key they will use to encrypt/decrypt the message
#the while looop ensures that the function will keep looping until the user enters a valid key
#valid key is one between the integer values 1 and 52, the latter is the MAX_KEY_SIZE we set earlier

def getKey():
	key = 0
	while True:
		print('Enter the key number (1-%s)' % (MAX_KEY_SIZE))
		key = int(input())
		if (key >= 1 and key <= MAX_KEY_SIZE):
			return key
			
#(5) Encrypting/Decrypting the Message:
#lets the player enter the key that they will use to encrypt or decrypt
#three parameters: MODE sets the function to encrypt/decrypt, MESSAGE is the plaintext to encrypt/decrypt, KEY is what we use encrypt/decrypt
#if we decrypt, then key is set to -key
#in order to shift the letters around to do th encryption/decryption, we first need to convert them to numbers
#the number for each letter in the SYMBOLS string will be the index where it appears
#find() looks for the first occurrence of a passed string and returns its index
#if find() does not find anything then it returns -1, so in that case the character in symbol will just be added to translated without any change

def getTranslatedMessage(mode, message, key):
	if mode[0] == 'd':
		key = -key
		translated = ''
   
   for symbol in message:
      symbolIndex = SYMBOLS.find(symbol)
      if symbolIndex == -1: #Symbol not found in SYMBOLS
         #Just add this symbol without any change
         translated += symbol
      else:
         #encrypt or decrypt
         symbolIndex += key
         
      if symbolIndex >= len(SYMBOLS):
         symbolIndex -= len(SYMBOLS)
      elif symbolIndex < 0:
         symbolIndex += len(SYMBOLS)
         
      translated += SYMBOLS[symbolIndex]
   return translated
   
mode = getMode()
message = getMessage()
key = getKey()
print('Your translated text is:')
print(getTranslatedMessage(mode, message, key))
